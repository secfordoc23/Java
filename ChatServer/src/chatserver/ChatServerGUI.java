//Program: chatserver
//This: ChatServerGUI.java
//Date: 4/29/2016
//Author: Jason Welch
//Purpose: a class that implements a GUI to Run / configure a chat Server

package chatserver;

import java.io.PrintWriter;
import static java.lang.Thread.sleep;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.HashSet;
import javax.swing.DefaultListModel;

public class ChatServerGUI extends javax.swing.JFrame
{

    private static ServerSocket server;
    private HashSet<Credential> userList = new HashSet<>();
    private DefaultListModel listModel;

    //=================== Default Constructor ==========================
    public ChatServerGUI(int port)
    {
        initComponents();
        portTextField.setText("" + port);
        connectionTextArea.setEditable(false);
        
        // Code to use ListBox type methods for a JList
        usersList.setModel(new javax.swing.DefaultListModel());
        listModel = (DefaultListModel)usersList.getModel();
        listModel.clear();
        
        connectionTextArea.setText(null);
        
        connectionTextArea.append("Loading User List....\n");
        
        // Load User List from File
        FileReadWriter readFile = new FileReadWriter();
        
        userList = readFile.readUserFile();
        
        for(Credential user : userList)
        {
            listModel.addElement(user.getUsername());
        }
        
        connectionTextArea.append("User List Loaded.\n");
        try
        {
            port = Integer.parseInt(portTextField.getText());
        }
        catch (Exception ex)
        {
            connectionTextArea.append("Invalid port number!\n");
        }
        
        connectionTextArea.append("Set Port number to: " + port + "\n");
        
        portTextField.setEditable(false);        
                
    }
    
    //================= getUserList =======================
    public HashSet<Credential> getUserList()
    {
        return userList;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents()
    {

        connectionScrollPane = new javax.swing.JScrollPane();
        connectionTextArea = new javax.swing.JTextArea();
        connectionLabel = new javax.swing.JLabel();
        userScrollPane = new javax.swing.JScrollPane();
        usersList = new javax.swing.JList();
        usersLabel = new javax.swing.JLabel();
        removeButton = new javax.swing.JButton();
        addPanel = new javax.swing.JPanel();
        addButton = new javax.swing.JButton();
        addPasswordField = new javax.swing.JPasswordField();
        addPasswordLabel = new javax.swing.JLabel();
        addusernameLabel = new javax.swing.JLabel();
        addUsernameTextField = new javax.swing.JTextField();
        exitButton = new javax.swing.JButton();
        addUserLabel = new javax.swing.JLabel();
        portLabel = new javax.swing.JLabel();
        portTextField = new javax.swing.JTextField();
        serverIPLabel = new javax.swing.JLabel();
        serverIPTextField = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Chat Server");
        setName("ChatServerFrame"); // NOI18N
        addWindowListener(new java.awt.event.WindowAdapter()
        {
            public void windowClosing(java.awt.event.WindowEvent evt)
            {
                closingOperations(evt);
            }
        });

        connectionTextArea.setColumns(20);
        connectionTextArea.setRows(5);
        connectionScrollPane.setViewportView(connectionTextArea);

        connectionLabel.setText("Chat Connection Log:");

        userScrollPane.setViewportView(usersList);

        usersLabel.setText("User List:");

        removeButton.setText("Remove");
        removeButton.setPreferredSize(new java.awt.Dimension(51, 23));

        addPanel.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        addButton.setText("Add");
        addButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                addButtonActionPerformed(evt);
            }
        });

        addPasswordLabel.setText("Password:");

        addusernameLabel.setText("Username:");

        javax.swing.GroupLayout addPanelLayout = new javax.swing.GroupLayout(addPanel);
        addPanel.setLayout(addPanelLayout);
        addPanelLayout.setHorizontalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 87, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addusernameLabel))
                .addGap(23, 23, 23)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(addPanelLayout.createSequentialGroup()
                        .addComponent(addPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, 98, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addPasswordLabel))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        addPanelLayout.setVerticalGroup(
            addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(addPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(addusernameLabel)
                    .addComponent(addPasswordLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(addPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(addUsernameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(addPasswordField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(addButton, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        exitButton.setText("Exit");
        exitButton.addActionListener(new java.awt.event.ActionListener()
        {
            public void actionPerformed(java.awt.event.ActionEvent evt)
            {
                exitButtonActionPerformed(evt);
            }
        });

        addUserLabel.setText("Add User:");

        portLabel.setText("Port Number: ");

        portTextField.setEditable(false);
        portTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        serverIPLabel.setText("Server IP Address:");

        serverIPTextField.setEditable(false);
        serverIPTextField.setHorizontalAlignment(javax.swing.JTextField.CENTER);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(usersLabel)
                            .addComponent(addUserLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(userScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 304, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(addPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(portTextField)
                            .addComponent(serverIPLabel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 93, Short.MAX_VALUE)
                            .addComponent(serverIPTextField)
                            .addComponent(portLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(exitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(removeButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(connectionLabel)
                    .addComponent(connectionScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 351, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(connectionLabel)
                    .addComponent(usersLabel))
                .addGap(1, 1, 1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(userScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 147, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(portLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(portTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(serverIPLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(serverIPTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(removeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(addUserLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(addPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(exitButton, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addComponent(connectionScrollPane))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        portLabel.getAccessibleContext().setAccessibleName("Port Number:  ");

        pack();
    }// </editor-fold>//GEN-END:initComponents
    
      
    //====================== addButtonActionPerformed ===================
    private void addButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_addButtonActionPerformed
    {//GEN-HEADEREND:event_addButtonActionPerformed
        String username,password;
        username = addUsernameTextField.getText();
        password = String.valueOf((addPasswordField.getPassword()));
        
        Credential user = new Credential(username,password);
        userList.add(user);
        
        listModel.clear();
        for(Credential user2 : userList)
        {
            listModel.addElement(user2.getUsername());
        }
        connectionTextArea.append("Added user: " + user.getUsername() + "\n");
        addUsernameTextField.setText("");
        addPasswordField.setText("");
    }//GEN-LAST:event_addButtonActionPerformed

        //============== messageRecieved() =================================
    public void messageReceived(String message)
    {
        connectionTextArea.append(message + "\n");
    }
    
    //================= exitButtonActionPerformed ======================
    private void exitButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_exitButtonActionPerformed
    {//GEN-HEADEREND:event_exitButtonActionPerformed
        exitEvent();
    }//GEN-LAST:event_exitButtonActionPerformed

    //=================== closingOperations ============================
    private void closingOperations(java.awt.event.WindowEvent evt)//GEN-FIRST:event_closingOperations
    {//GEN-HEADEREND:event_closingOperations
        exitEvent();
    }//GEN-LAST:event_closingOperations

    //======================== exitEvent ==============================
    private void exitEvent()
    {
        connectionTextArea.append("Saving User List to file...\n");
        FileReadWriter writer = new FileReadWriter();
        writer.writeUserFile(userList);
        
        try
        {
            sleep(1000);
        }
        catch(Exception ex)
        {
            System.out.println("Failed to Sleep.");
        }
        
        connectionTextArea.append("Sending Disconnect Message to Clients...\n");
        PrintWriter disconnectMessage;
        try
        {
            for(Socket connectedSocket : ChatServer.connectedSockets)
            {
                disconnectMessage = new PrintWriter(connectedSocket.getOutputStream());
                disconnectMessage.println("**##!:Server is Shutting down.");
                disconnectMessage.flush();
            }
        }
        catch(Exception ex)
        {
            connectionTextArea.append("***Failed to send disconnect message***\n");
        }
        
        try
        {
            sleep(1000);
        }
        catch(Exception ex)
        {
            System.out.println("Failed to Sleep.");
        }
        
        System.exit(0);
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addButton;
    private javax.swing.JPanel addPanel;
    private javax.swing.JPasswordField addPasswordField;
    private javax.swing.JLabel addPasswordLabel;
    private javax.swing.JLabel addUserLabel;
    private javax.swing.JTextField addUsernameTextField;
    private javax.swing.JLabel addusernameLabel;
    private javax.swing.JLabel connectionLabel;
    private javax.swing.JScrollPane connectionScrollPane;
    private javax.swing.JTextArea connectionTextArea;
    private javax.swing.JButton exitButton;
    private javax.swing.JLabel portLabel;
    private javax.swing.JTextField portTextField;
    private javax.swing.JButton removeButton;
    private javax.swing.JLabel serverIPLabel;
    private javax.swing.JTextField serverIPTextField;
    private javax.swing.JScrollPane userScrollPane;
    private javax.swing.JLabel usersLabel;
    private javax.swing.JList usersList;
    // End of variables declaration//GEN-END:variables
}
